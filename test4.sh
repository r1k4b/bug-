#!/usr/bin/env bash
# Final Recon Tool v6.2 - Fully Checked & Hardened

# --- Speed Configuration (Balanced for Speed & Stealth) ---
HTTPX_THREADS=250
NUCLEI_CONCURRENCY=200
TOP_PORTS=1000

# --- Telegram Bot Configuration ---
# тЪая╕П WARNING: This token has been publicly exposed and is NOT secure.
TELEGRAM_BOT_TOKEN="7481472810:AAFIkTDTlb_pQbmtN-Yz8SWm-6sE_0tmn-U" 
TELEGRAM_CHAT_ID="5002868545"

# --- Setup ---
set -Eeuo pipefail
shopt -s inherit_errexit

# --- Usage Check ---
if [[ $# -lt 1 || "$1" =~ ^(-h|--help)$ ]]; then
    echo "Usage: $0 <domain>"
    echo "Example: ./vps_recon.sh example.com"
    exit 1
fi
domain="$1"

# --- Directory Setup ---
read -rp "ЁЯФ╕ ржЖржЙржЯржкрзБржЯ ржлрзЛрж▓рзНржбрж╛рж░рзЗрж░ ржкрж╛рже ржжрж┐ржи (e.g. /root/bug_bounty): " base_dir
if [[ -z "$base_dir" ]]; then
    echo "тЬЦя╕П ржкрж╛рже ржЦрж╛рж▓рж┐ рж░рж╛ржЦрж╛ ржпрж╛ржмрзЗ ржирж╛" >&2
    exit 1
fi

scan_dir="$base_dir/${domain}_scan_$(date +%Y%m%d_%H%M%S)"
mkdir -p "$scan_dir" || { echo "тЬЦя╕П '$scan_dir' рждрзИрж░рж┐ ржХрж░рж╛ ржпрж╛ржЪрзНржЫрзЗ ржирж╛" >&2; exit 1; }

log(){ printf '\n\e[1;36m%s\e[0m\n' "--- $* ---"; }
info(){ printf '\e[1;33m[%s] %s\e[0m\n' "$(date +'%H:%M:%S')" "$*"; }
error(){ printf '\e[1;31m[ERROR] %s\e[0m\n' "$*"; }

# --- Dependency Check ---
required_tools=(subfinder assetfinder dnsx httpx naabu nmap katana gau gf nuclei sqlmap dalfox subzy zip curl)
info "Checking for required tools..."
for tool in "${required_tools[@]}"; do
    if ! command -v "$tool" &>/dev/null; then
        error "ржкрзНрж░рзЯрзЛржЬржирзАрзЯ ржЯрзБрж▓ ржЗржирзНрж╕ржЯрж▓ ржирзЗржЗ: $tool"
        exit 1
    fi
done

# --- GF Pattern Check ---
if ! [[ -d "$HOME/.gf" ]] || ! ls -A "$HOME/.gf"/*.json &>/dev/null; then
    error "GF ржкрзНржпрж╛ржЯрж╛рж░рзНржи ржЦрзБржБржЬрзЗ ржкрж╛ржУрзЯрж╛ ржпрж╛ржЪрзНржЫрзЗ ржирж╛ ($HOME/.gf)ред"
    error "ржкрзНрж░ржержорзЗ 'gf -update' ржПржмржВ ржЕржирзНржпрж╛ржирзНржп ржкрзНржпрж╛ржЯрж╛рж░рзНржи ржЗржирзНрж╕ржЯрж▓ ржХрж░рзБржиред"
    exit 1
fi

info "тЬЕ All tools and patterns are ready. Starting scan for '$domain'."
info "Output Directory тЖТ $scan_dir"

#<editor-fold desc="Scanning Steps 1-9">
#тФАтФАтФАтФАтФАтФАтФАтФА [1] Subdomain Enumeration тФАтФАтФАтФАтФАтФАтФАтФА#
log "ржзрж╛ржк рзз/рззрзж: Subdomain ржЦрзЛржБржЬрж╛ рж╣ржЪрзНржЫрзЗ..."
(subfinder -d "$domain" -silent; assetfinder --subs-only "$domain" 2>/dev/null) \
    | sort -u > "$scan_dir/subdomains.txt"
subdomains_found=$(wc -l < "$scan_dir/subdomains.txt")
info "тЬЕ ржорзЛржЯ $subdomains_found ржЯрж┐ ржЗржЙржирж┐ржХ рж╕рж╛ржмржбрзЛржорзЗржЗржи ржкрж╛ржУрзЯрж╛ ржЧрзЗржЫрзЗред"

#тФАтФАтФАтФАтФАтФАтФАтФА [2] Host & Port Discovery тФАтФАтФАтФАтФАтФАтФАтФА#
log "ржзрж╛ржк рзи/рззрзж: рж▓рж╛ржЗржн рж╣рзЛрж╕рзНржЯ ржПржмржВ ржкрзЛрж░рзНржЯ ржЦрзЛржБржЬрж╛ рж╣ржЪрзНржЫрзЗ..."
dnsx -l "$scan_dir/subdomains.txt" -silent -resp-only -a -o "$scan_dir/resolved.txt"
httpx -l "$scan_dir/resolved.txt" -silent -threads "$HTTPX_THREADS" -o "$scan_dir/live_hosts.txt"
info "Naabu ржжрж┐рзЯрзЗ ржЯржк $TOP_PORTS ржЯрж┐ ржкрзЛрж░рзНржЯ рж╕рзНржХрзНржпрж╛ржи ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ..."
naabu -l "$scan_dir/resolved.txt" -top-ports "$TOP_PORTS" -silent -o "$scan_dir/ports.txt"

#тФАтФАтФАтФАтФАтФАтФАтФА [3] Nmap Service Scanning тФАтФАтФАтФАтФАтФАтФАтФА#
log "ржзрж╛ржк рзй/рззрзж: Nmap ржжрж┐рзЯрзЗ рж╕рж╛рж░рзНржнрж┐рж╕ рж╕рзНржХрзНржпрж╛ржи ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ..."
if [[ -s "$scan_dir/ports.txt" ]]; then
    nmap -sV -sC -iL "$scan_dir/ports.txt" -oA "$scan_dir/nmap_scan" -Pn > "$scan_dir/nmap.log" 2>&1 || true
    info "Nmap рж╕рзНржХрзНржпрж╛ржи рж╕ржорзНржкржирзНржиред рж▓ржЧ ржлрж╛ржЗрж▓: $scan_dir/nmap.log"
else
    info "    ржХрзЛржирзЛ ржЦрзЛрж▓рж╛ ржкрзЛрж░рзНржЯ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐, Nmap рж╕рзНржХрж┐ржк ржХрж░рж╛ рж╣рж▓рзЛред"
fi

#тФАтФАтФАтФАтФАтФАтФАтФА [4] URL Discovery & JS Files тФАтФАтФАтФАтФАтФАтФАтФА#
log "ржзрж╛ржк рзк/рззрзж: URL ржПржмржВ JS ржлрж╛ржЗрж▓ ржЦрзЛржБржЬрж╛ рж╣ржЪрзНржЫрзЗ..."
(gau --subs "$domain" 2>/dev/null; katana -u "https://$domain" -silent -jc -d 2) \
    | sort -u > "$scan_dir/all_urls.txt"
grep -Ei '\.js(\?|$)' "$scan_dir/all_urls.txt" | sort -u > "$scan_dir/js_urls.txt"
info "URL ржЦрзЛржБржЬрж╛ рж╕ржорзНржкржирзНржиред"

#тФАтФАтФАтФАтФАтФАтФАтФА [5] Secret Scanning with Nuclei тФАтФАтФАтФАтФАтФАтФАтФА#
log "ржзрж╛ржк рзл/рззрзж: рж╕ржВржмрзЗржжржирж╢рзАрж▓ рждржерзНржп (Secrets) рж╕рзНржХрзНржпрж╛ржи ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ..."
if [[ -s "$scan_dir/all_urls.txt" ]]; then
    nuclei -l "$scan_dir/all_urls.txt" -t exposures/ -c "$NUCLEI_CONCURRENCY" | tee -a "$scan_dir/secrets_report.txt" || true
else
    info "    URL ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐, Secret Scanning рж╕рзНржХрж┐ржк ржХрж░рж╛ рж╣рж▓рзЛред"
fi

#тФАтФАтФАтФАтФАтФАтФАтФА [6] Specialized Parameter Scanning тФАтФАтФАтФАтФАтФАтФАтФА#
log "ржзрж╛ржк рзм/рззрзж: XSS ржПржмржВ SQLi ржЯрж╛рж░рзНржЧрзЗржЯ рж╕рзНржХрзНржпрж╛ржи ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ..."
cat "$scan_dir/all_urls.txt" | gf sqli > "$scan_dir/sqli_targets.txt" || true
cat "$scan_dir/all_urls.txt" | gf xss > "$scan_dir/xss_targets.txt" || true
if [[ -s "$scan_dir/xss_targets.txt" ]]; then
    info "Dalfox ржжрж┐рзЯрзЗ XSS рж╕рзНржХрзНржпрж╛ржи ржЪрж▓ржЫрзЗ..."
    dalfox file "$scan_dir/xss_targets.txt" | tee -a "$scan_dir/dalfox_report.txt" || true
fi
if [[ -s "$scan_dir/sqli_targets.txt" ]]; then
    info "SQLmap ржжрж┐рзЯрзЗ SQL Injection рж╕рзНржХрзНржпрж╛ржи ржЪрж▓ржЫрзЗ..."
    sqlmap -m "$scan_dir/sqli_targets.txt" --batch --random-agent --level=2 --risk=1 --output-dir="$scan_dir/sqlmap_out" --disable-coloring || true
fi

#тФАтФАтФАтФАтФАтФАтФАтФА [7] General Vulnerability Scan тФАтФАтФАтФАтФАтФАтФАтФА#
log "ржзрж╛ржк рзн/рззрзж: рж╕рж╛ржзрж╛рж░ржг ржжрзБрж░рзНржмрж▓рждрж╛ (Vulnerability) рж╕рзНржХрзНржпрж╛ржи ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ..."
if [[ -s "$scan_dir/live_hosts.txt" ]]; then
    nuclei -l "$scan_dir/live_hosts.txt" -severity low,medium,high,critical \
           -c "$NUCLEI_CONCURRENCY" | tee -a "$scan_dir/nuclei_report.txt" || true
else
    info "    рж▓рж╛ржЗржн рж╣рзЛрж╕рзНржЯ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐, Nuclei рж╕рзНржХрж┐ржк ржХрж░рж╛ рж╣рж▓рзЛред"
fi

#тФАтФАтФАтФАтФАтФАтФАтФА [8] Subdomain Takeover Scan тФАтФАтФАтФАтФАтФАтФАтФА#
log "ржзрж╛ржк рзо/рззрзж: Subdomain Takeover рж╕рзНржХрзНржпрж╛ржи ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ..."
if [[ -s "$scan_dir/subdomains.txt" ]]; then
    subzy run --targets "$scan_dir/subdomains.txt" | tee -a "$scan_dir/takeover_report.txt" || true
else
    info "    рж╕рж╛ржмржбрзЛржорзЗржЗржи ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐, Takeover Scan рж╕рзНржХрж┐ржк ржХрж░рж╛ рж╣рж▓рзЛред"
fi

#тФАтФАтФАтФАтФАтФАтФАтФА [9] Auto Zipping тФАтФАтФАтФАтФАтФАтФАтФА#
log "ржзрж╛ржк рзп/рззрзж: рж░рж┐ржкрзЛрж░рзНржЯ ржЬрж┐ржк ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ..."
zip_file_path="$base_dir/${domain}_report_final.zip"
zip -rq "$zip_file_path" "$scan_dir"
#</editor-fold>

# --- Final Summary Data ---
live_hosts_found=$(wc -l < "$scan_dir/live_hosts.txt" 2>/dev/null || echo 0)
open_ports_found=$(wc -l < "$scan_dir/ports.txt" 2>/dev/null || echo 0)
nuclei_findings=$(grep -c ']' "$scan_dir/nuclei_report.txt" 2>/dev/null || echo 0)
secrets_found=$(grep -c ']' "$scan_dir/secrets_report.txt" 2>/dev/null || echo 0)
takeover_findings=$(grep -ci 'VULNERABLE' "$scan_dir/takeover_report.txt" 2>/dev/null || echo 0)

#<editor-fold desc="Terminal Summary">
# --- Terminal Summary Display ---
clear
log "тЬЕ рж╕ржорж╕рзНржд ржХрж╛ржЬ рж╕ржорзНржкржирзНржи!"
echo "--------------------------------------------------------"
echo "ЁЯУК SCAN SUMMARY FOR: $domain"
echo "--------------------------------------------------------"
echo "ЁЯУБ Full Report Saved in: $scan_dir"
echo "ЁЯУж Zipped Report: $zip_file_path"
echo ""
echo "KEY FINDINGS:"
echo "-----------------"
echo "   - ржорзЛржЯ ржЗржЙржирж┐ржХ рж╕рж╛ржмржбрзЛржорзЗржЗржи ржкрж╛ржУрзЯрж╛ ржЧрзЗржЫрзЗ : $subdomains_found"
echo "   - рж▓рж╛ржЗржн ржУрзЯрзЗржм рж╣рзЛрж╕рзНржЯ ржкрж╛ржУрзЯрж╛ ржЧрзЗржЫрзЗ      : $live_hosts_found"
echo "   - ржЦрзЛрж▓рж╛ ржкрзЛрж░рзНржЯ ржкрж╛ржУрзЯрж╛ ржЧрзЗржЫрзЗ         : $open_ports_found"
echo "   - Nuclei ржлрж╛ржЗржирзНржбрж┐ржВрж╕ (General): $nuclei_findings"
echo "   - Secrets/Exposures ржкрж╛ржУрзЯрж╛ ржЧрзЗржЫрзЗ   : $secrets_found"
echo "   - рж╕ржорзНржнрж╛ржмрзНржп Takeover ржкрж╛ржУрзЯрж╛ ржЧрзЗржЫрзЗ    : $takeover_findings"
echo "--------------------------------------------------------"
#</editor-fold>

#тФАтФАтФАтФАтФАтФАтФАтФА [10] Send Telegram Notification тФАтФАтФАтФАтФАтФАтФАтФА#
log "ржзрж╛ржк рззрзж/рззрзж: ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржкрж╛ржарж╛ржирзЛ рж╣ржЪрзНржЫрзЗ..."
if [[ -n "$TELEGRAM_BOT_TOKEN" && -n "$TELEGRAM_CHAT_ID" ]]; then
    # Improved message formatting using a heredoc
    summary_message=$(cat <<EOF
*ЁЯУК Scan Summary for: ${domain}*

*KEY FINDINGS:*
\`\`\`
- Unique Subdomains: ${subdomains_found}
- Live Web Hosts   : ${live_hosts_found}
- Open Ports Found : ${open_ports_found}
- Nuclei Findings  : ${nuclei_findings}
- Secrets/Exposures: ${secrets_found}
- Possible Takeovers: ${takeover_findings}
\`\`\`

Full report is attached.
EOF
    )

    # Send the summary message and check for success
    if curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
        -d "chat_id=${TELEGRAM_CHAT_ID}" \
        -d "text=${summary_message}" \
        -d "parse_mode=Markdown" > /dev/null; then
        info "тЬЕ ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржорзЗрж╕рзЗржЬ рж╕ржлрж▓ржнрж╛ржмрзЗ ржкрж╛ржарж╛ржирзЛ рж╣рзЯрзЗржЫрзЗред"
    else
        error "тЭМ ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛рждрзЗ ржмрзНржпрж░рзНржеред"
    fi

    # Send the zip file and check for success
    if curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument" \
        -F "chat_id=${TELEGRAM_CHAT_ID}" \
        -F "document=@${zip_file_path}" > /dev/null; then
        info "тЬЕ ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо рж░рж┐ржкрзЛрж░рзНржЯ ржлрж╛ржЗрж▓ рж╕ржлрж▓ржнрж╛ржмрзЗ ржкрж╛ржарж╛ржирзЛ рж╣рзЯрзЗржЫрзЗред"
    else
        error "тЭМ ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо рж░рж┐ржкрзЛрж░рзНржЯ ржлрж╛ржЗрж▓ ржкрж╛ржарж╛рждрзЗ ржмрзНржпрж░рзНржеред"
    fi
else
    info "    ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржЯрзЛржХрзЗржи ржмрж╛ ржЪрзНржпрж╛ржЯ ржЖржЗржбрж┐ ржжрзЗржУрзЯрж╛ рж╣рзЯржирж┐, ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи рж╕рзНржХрж┐ржк ржХрж░рж╛ рж╣рж▓рзЛред"
fi
